LAZY_LOAD = {
    "dagster.builtins": ("Any", "Bool", "Float", "Int", "Nothing", "String"),
    "dagster.config": ("Enum", "EnumValue", "Field", "Map", "Permissive", "Selector", "Shape"),
    "dagster.config.config_schema": ("ConfigSchema",),
    "dagster.config.config_type": ("Array", "Noneable", "ScalarUnion"),
    "dagster.core.asset_defs": (
        "AssetGroup",
        "AssetIn",
        "AssetsDefinition",
        "SourceAsset",
        "asset",
        "build_assets_job",
        "multi_asset",
    ),
    "dagster.core.definitions": (
        "AssetKey",
        "AssetMaterialization",
        "AssetObservation",
        "AssetSensorDefinition",
        "CompositeSolidDefinition",
        "ConfigMapping",
        "DagsterAssetMetadataValue",
        "DagsterPipelineRunMetadataValue",
        "DailyPartitionsDefinition",
        "DefaultScheduleStatus",
        "DefaultSensorStatus",
        "DependencyDefinition",
        "DynamicOut",
        "DynamicOutput",
        "DynamicOutputDefinition",
        "DynamicPartitionsDefinition",
        "ExecutorDefinition",
        "ExecutorRequirement",
        "ExpectationResult",
        "Failure",
        "FloatMetadataValue",
        "GraphDefinition",
        "GraphIn",
        "GraphOut",
        "HookDefinition",
        "HourlyPartitionsDefinition",
        "In",
        "InputDefinition",
        "InputMapping",
        "IntMetadataValue",
        "JobDefinition",
        "JsonMetadataValue",
        "LoggerDefinition",
        "MarkdownMetadataValue",
        "Materialization",
        "MetadataEntry",
        "MetadataValue",
        "ModeDefinition",
        "MonthlyPartitionsDefinition",
        "MultiDependencyDefinition",
        "NodeInvocation",
        "OpDefinition",
        "Out",
        "Output",
        "OutputDefinition",
        "OutputMapping",
        "Partition",
        "PartitionScheduleDefinition",
        "PartitionSetDefinition",
        "PartitionedConfig",
        "PartitionsDefinition",
        "PathMetadataValue",
        "PipelineDefinition",
        "PipelineFailureSensorContext",
        "PresetDefinition",
        "PythonArtifactMetadataValue",
        "RepositoryData",
        "RepositoryDefinition",
        "ResourceDefinition",
        "RetryRequested",
        "RunFailureSensorContext",
        "RunRequest",
        "RunStatusSensorContext",
        "RunStatusSensorDefinition",
        "ScheduleDefinition",
        "ScheduleEvaluationContext",
        "ScheduleExecutionContext",
        "SensorDefinition",
        "SensorEvaluationContext",
        "SensorExecutionContext",
        "SkipReason",
        "SolidDefinition",
        "SolidInvocation",
        "StaticPartitionsDefinition",
        "TableColumn",
        "TableColumnConstraints",
        "TableConstraints",
        "TableMetadataValue",
        "TableRecord",
        "TableSchema",
        "TableSchemaMetadataValue",
        "TextMetadataValue",
        "TypeCheck",
        "UrlMetadataValue",
        "WeeklyPartitionsDefinition",
        "asset_sensor",
        "build_init_logger_context",
        "build_schedule_from_partitioned_job",
        "composite_solid",
        "config_mapping",
        "daily_partitioned_config",
        "daily_schedule",
        "default_executors",
        "dynamic_partitioned_config",
        "executor",
        "failure_hook",
        "graph",
        "hourly_partitioned_config",
        "hourly_schedule",
        "in_process_executor",
        "job",
        "lambda_solid",
        "logger",
        "make_values_resource",
        "monthly_partitioned_config",
        "monthly_schedule",
        "multiple_process_executor_requirements",
        "multiprocess_executor",
        "op",
        "pipeline",
        "pipeline_failure_sensor",
        "reconstructable",
        "repository",
        "resource",
        "run_failure_sensor",
        "run_status_sensor",
        "schedule",
        "schedule_from_partitions",
        "sensor",
        "solid",
        "static_partitioned_config",
        "success_hook",
        "weekly_partitioned_config",
        "weekly_schedule",
    ),
    "dagster.core.definitions.configurable": ("configured",),
    "dagster.core.definitions.policy": ("Backoff", "Jitter", "RetryPolicy"),
    "dagster.core.definitions.schedule_definition": ("build_schedule_context"),
    "dagster.core.definitions.sensor_definition": ("build_sensor_context"),
    "dagster.core.definitions.utils": (
        "config_from_files",
        "config_from_pkg_resources",
        "config_from_yaml_strings",
    ),
    "dagster.core.definitions.version_strategy": ("SourceHashVersionStrategy", "VersionStrategy"),
    "dagster.core.errors": (
        "DagsterConfigMappingFunctionError",
        "DagsterError",
        "DagsterEventLogInvalidForRun",
        "DagsterExecutionStepExecutionError",
        "DagsterExecutionStepNotFoundError",
        "DagsterInvalidConfigDefinitionError",
        "DagsterInvalidConfigError",
        "DagsterInvalidDefinitionError",
        "DagsterInvariantViolationError",
        "DagsterResourceFunctionError",
        "DagsterRunNotFoundError",
        "DagsterStepOutputNotFoundError",
        "DagsterSubprocessError",
        "DagsterTypeCheckDidNotPass",
        "DagsterTypeCheckError",
        "DagsterUnknownPartitionError",
        "DagsterUnknownResourceError",
        "DagsterUnmetExecutorRequirementsError",
        "DagsterUserCodeExecutionError",
    ),
    "dagster.core.events": ("DagsterEvent", "DagsterEventType"),
    "dagster.core.execution.api": (
        "execute_pipeline",
        "execute_pipeline_iterator",
        "reexecute_pipeline",
        "reexecute_pipeline_iterator",
    ),
    "dagster.core.execution.build_resources": ("build_resources",),
    "dagster.core.execution.context.compute": ("OpExecutionContext", "SolidExecutionContext"),
    "dagster.core.execution.context.hook": ("HookContext", "build_hook_context"),
    "dagster.core.execution.context.init": ("InitResourceContext", "build_init_resource_context"),
    "dagster.core.execution.context.input": ("InputContext", "build_input_context"),
    "dagster.core.execution.context.invocation": ("build_op_context", "build_solid_context"),
    "dagster.core.execution.context.logger": ("InitLoggerContext",),
    "dagster.core.execution.context.output": ("OutputContext", "build_output_context"),
    "dagster.core.execution.context.system": ("TypeCheckContext",),
    "dagster.core.execution.execute_in_process_result": ("ExecuteInProcessResult",),
    "dagster.core.execution.results": (
        "CompositeSolidExecutionResult",
        "PipelineExecutionResult",
        "SolidExecutionResult",
    ),
    "dagster.core.execution.validate_run_config": ("validate_run_config"),
    "dagster.core.executor.base": ("Executor"),
    "dagster.core.executor.init": ("InitExecutorContext"),
    "dagster.core.instance": ("DagsterInstance"),
    "dagster.core.launcher": ("DefaultRunLauncher"),
    "dagster.core.log_manager": ("DagsterLogManager"),
    "dagster.core.storage.file_manager": ("FileHandle", "LocalFileHandle", "local_file_manager"),
    "dagster.core.storage.fs_asset_io_manager": ("fs_asset_io_manager"),
    "dagster.core.storage.fs_io_manager": ("custom_path_fs_io_manager", "fs_io_manager"),
    "dagster.core.storage.io_manager": ("IOManager", "IOManagerDefinition", "io_manager"),
    "dagster.core.storage.mem_io_manager": ("mem_io_manager"),
    "dagster.core.storage.memoizable_io_manager": ("MemoizableIOManager"),
    "dagster.core.storage.pipeline_run": ("DagsterRun", "PipelineRun", "PipelineRunStatus"),
    "dagster.core.storage.root_input_manager": (
        "RootInputManager",
        "RootInputManagerDefinition",
        "root_input_manager",
    ),
    "dagster.core.storage.tags": ("MEMOIZED_RUN_TAG",),
    "dagster.core.types.config_schema": (
        "DagsterTypeLoader",
        "DagsterTypeMaterializer",
        "dagster_type_loader",
        "dagster_type_materializer",
    ),
    "dagster.core.types.dagster_type": (
        "DagsterType",
        "List",
        "Optional",
        "PythonObjectDagsterType",
    ),
    "dagster.core.types.decorator": (
        "make_python_type_usable_as_dagster_type",
        "usable_as_dagster_type",
    ),
    "dagster.core.types.python_dict": ("Dict"),
    "dagster.core.types.python_set": ("Set"),
    "dagster.core.types.python_tuple": ("Tuple"),
    "dagster.utils": ("file_relative_path"),
    "dagster.utils.alert": ("make_email_on_run_failure_sensor"),
    "dagster.utils.backcompat": ("ExperimentalWarning", "rename_warning"),
    "dagster.utils.log": ("get_dagster_logger"),
    "dagster.utils.partitions": (
        "create_offset_partition_selector",
        "date_partition_range",
        "identity_partition_selector",
    ),
    "dagster.utils.test": (
        "check_dagster_type",
        "execute_solid",
        "execute_solid_within_pipeline",
        "execute_solids_within_pipeline",
    ),
    "dagster.config.source": ("BoolSource", "StringSource", "IntSource"),
}
